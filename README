login1, bgalb
Student Name1 (ID1), Gal Katzhendler(203165238)
login2, omer
Student Name2 (ID1), Omer Shacham(204034722)
EX: 2

FILES:
README - this file
Makefile - a file that helps to compile all of this
threadStruct.cpp - a file that contain the single thread struct and basic commands
threadStruct.hpp - a file that contain the single thread struct and headers
uthreads.cpp - contain all the implementation to the single thread library.


REMARKS:
These are some remarks that
I want the graders to know
about this submission.

ANSWERS:

Task1:
- create a multi-threaded task on arduino micro-controller.
when I'm trying to write a program to my small arduino, a program that combines more than one sensor
I will prefer to use user-thread system.

the advantage here is that the os doesnt support kernel-threads but theres alot of small seperated problems
to solve on the other side. user-level threads help solve this issue when they are creating
a single thread for every arduino sensor and a "main thread" that have access to the whole collected data.


Task 2:
When the chrome creates a single process for every tab it may cause the computer to be very slow
because "invisible tabs" will take part in the process-cycle while stopping other computer active tasks.
Kernel-level threads would be quicker as the "idle time" would be divided between threads in the same process.
On the other hand, Kernel-Level threads would make the browser slower, as only one process would run ALL open
("invisible") tabs. Multiple processes would make the browser run faster, as each tab will get equal running time
from the computer, and they won't have to share only one process.



Task 3:
Every key press is an i/o interrupt while writing the command - The OS handles it, and sends appropriate signals
to the shell. Then as enter is pressed the KILL command sends a signal from the shell to Shotwell(through the OS)
that it should terminate (SIGTERM)
SIGRTMIN
SIGRT


Task 4:
real time is the external measure of time,
the amount of "ticks" that happen in the real world started counting time from
12:00:00:00 and now the time is 12:00:00:30 the real time diff will be 00:00:00:30
while the virtual time will be always <= than the real one and count only the "Neto" time spent in task.

An example of usage for this kind of timing is to measure what time is it.

in our user-threaded library we are using virtual time to count how much time passed for every thread
we are using virtual time because we want to measure the time that the thread runs
if we used the real time we would get a fixed time that passed from the time that the stopper
started to the time it stopped. We can use this "virtual time" to create "User level threads" for example,
if we want to divide the time the thread is being used for different tasks.
